name: Publish Python Package

on:
  workflow_run:
    workflows: [ "ci" ]
    types:
      - completed
  push:
    branches:
      - dev

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Build package
        run: |
          poetry build

      - name: Publish to Test PyPI
        env:
          POETRY_TEST_PYPI_TOKEN_PYPI: ${{ secrets.DS_TEST_PYPI_API_TOKEN }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi "${POETRY_TEST_PYPI_TOKEN_PYPI}"
          poetry publish -r test-pypi

      - name: Get the version from pyproject.toml
        id: get_version
        run: |
          echo "::set-output name=version::$(poetry version -s)"

      - name: Create Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a v${{ steps.get_version.outputs.version }}-dev -m "Release version ${{ steps.get_version.outputs.version }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/lucaromagnoli/dataservice.git v${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: "Release ${{ steps.get_version.outputs.version }}"
          body: "New release version ${{ steps.get_version.outputs.version }} is published"
          draft: false
          prerelease: false
