name: Run CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  statuses: write  # Ensure the workflow can update statuses

jobs:
  ci:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip and Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir poetry
          pip install nox nox-poetry

      - name: Install project dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --with dev --no-root

      - name: Lint ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff check .

      - name: Install playwright
        run: |
          python -m playwright install --with-deps

      - name: Run Nox sessions
        run: |
          nox --non-interactive -s tests


  release:
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.ref == 'refs/heads/main'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: |
          poetry install --no-root -E playwright

      - name: Check if version is already published
        id: check_version
        run: |
          VERSION=$(poetry version -s)
          if python -m pip search dataservice==$VERSION; then
            echo "Version $VERSION is already published. Skipping."
            exit 0
          else
            echo "Version $VERSION is not published yet. Proceeding."
          fi

      - name: Build package
        if: ${{ steps.check_version.outcome == 'success' }}
        run: |
          poetry build

      - name: Publish to PyPI
        if: ${{ steps.check_version.outcome == 'success' }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.DS_PYPI_API_TOKEN }}
        run: |
          poetry config http-basic.pypi "__token__" "${POETRY_PYPI_TOKEN_PYPI}"
          poetry publish

      - name: Get the version from pyproject.toml
        id: get_version
        run: |
          echo "::set-output name=version::$(poetry version -s)"

      - name: Create Git tag
        if: ${{ steps.check_version.outcome == 'success' }}
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a v${{ steps.get_version.outputs.version }} -m "Release version ${{ steps.get_version.outputs.version }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/lucaromagnoli/dataservice.git v${{ steps.get_version.outputs.version }}

      - name: Create GitHub Release
        if: ${{ steps.check_version.outcome == 'success' }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: "Release ${{ steps.get_version.outputs.version }}"
          body: "New release version ${{ steps.get_version.outputs.version }} is published"
          draft: false
          prerelease: false
